#===============================================================================
# GENERAL
#===============================================================================
# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# Enable mouse
set mouse


#===============================================================================
# UI
#===============================================================================
# Show dotfiles by default
set hidden!

# Show icons
set icons

# Show bounding box
set drawbox

# File previewer
# set previewer ~/.config/lf/pv.sh

set info size:time
set scrolloff 10 # leave some space at the top and the bottom of the screen
set cursorpreviewfmt "\033[7;2m" # Use the `dim` attribute instead of underline


#===============================================================================
# KEYMAPS
#===============================================================================
# Command completion
cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back

map C edit-config
map J :updir; down; open
map K :updir; up; open
map <enter> $$SHELL # Open new shell at current directory

# execute current file (must be executable)
# map x $$f
# map X !$f
# Or map to cut
map x :cut

# Remap d to delete
map d delete
map <delete> delete

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# Toggle hidden files
map . set hidden!

# Enhancing the rename command
map I :rename; cmd-home
map A :rename; cmd-end

# Preview file with bat
map i $bat --paging=always "$f"
# map i $~/.config/lf/pv.sh $f | less -R
# map i $LESSOPEN='| ~/.config/lf/pv.sh %s' less -R $f

# Follow symlinks
map gL follow_link

# Put lf into background
map <c-z> $ kill -STOP $PPID


#===============================================================================
# FUNCTIONS
#===============================================================================
# Share any file 256MiB limit
cmd share $curl -F"file=@$fx" https://0x0.st | xclip -selection c

# Follow symlinks
cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}


# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


# define a custom 'delete' command, default answer yes
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[Y/n]"
    read ans
    ans=${ans:-y}
    [ "$ans" = "y" ] && rm -rf $fx
}}


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Edit and reload config file
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

# Rename multiple files at the same time using your text editor
cmd bulkrename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}
