// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "command": "vscode-neovim.compositeEscape1",
        "key": "j",
        "when": "neovim.mode == insert && editorTextFocus",
        "args": "j"
    },
    {
        "command": "vscode-neovim.compositeEscape2",
        "key": "k",
        "when": "neovim.mode == insert && editorTextFocus",
        "args": "k"
    },
    {
        "key": "alt+enter", // TODO pick something
        "command": "runCommands",
        "args": {
            "commands": [
                "copyFilePath",
                // "terminal.focus",
                // {
                //     "command": "workbench.action.terminal.sendSequence",
                //     "args": { "text": "start '" }, // or `open` on macOS, or `xdg-open` or `open` on Linux
                //     // You can be extra fancy once VS Code 1.86 releases, where commands in arguments of `runCommands` can have their own when-clauses (see context keys `isWindows`, `isMac`, `isLinux`).
                // },
                "workbench.action.terminal.paste",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": { "text": "\r" },
                },
            ],
        },
        "when": "filesExplorerFocus && isFileSystemResource && listHasSelectionOrFocus && resourceSet",
    },
    {
        "key": "alt+enter",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "panelFocus"
    },
    {
        "key": "ctrl+shift+n",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus"
    },
    {
        "key": "ctrl+f5",
        "command": "-cmake.debugTarget",
        "when": "cmake:enableFullFeatureSet && inCMakeProject && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "alt+`",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.output.action.clearOutput",
        "when": "workbench.panel.output.active && panelFocus"
    },
    {
        "key": "ctrl+alt+n",
        "command": "python.execInTerminal-icon",
        "when": "editorLangId == python"
    },
    {
        "key": "shift+alt+n",
        "command": "python.debugInTerminal"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.focusNextGroup",
        "when": "!activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+alt+v",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+up",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "-workbench.action.terminal.scrollUp",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+shift+down",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "-workbench.action.terminal.scrollDown",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "alt+\\",
        "command": "workbench.action.toggleEditorType"
    },
    {
        "key": "alt+`",
        "command": "workbench.explorer.fileView.focus",
        "when": "!filesExplorerFocus"
    },
    {
        "key": "f1",
        "command": "workbench.action.showCommands",
        "when": "!terminalFocus"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+alt+l",
        "command": "vscode-serial-monitor.clearOutput"
    },
    {
        "key": "ctrl+alt+m",
        "command": "workbench.view.extension.vscode-serial-monitor-tools"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "workbench.action.splitEditor",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "ctrl+n",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.files.newUntitledFile",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    }
]